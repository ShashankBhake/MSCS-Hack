{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sharvani\\\\Documents\\\\GitHub\\\\MSCS-Hack\\\\Frontend\\\\src\\\\contexts\\\\userContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from \"react\";\nimport { App, Credentials } from \"realm-web\";\nimport { APP_ID } from \"../realm/constants\"; // Creating a Realm App Instance\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new App(APP_ID); // Creating a user context to manage and access all the user related functions\n// across different components and pages.\n\nexport const UserContext = /*#__PURE__*/createContext();\nexport const UserProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(null); // Function to log in user into our App Service app using their email & password\n\n  const emailPasswordLogin = async (email, password) => {\n    const credentials = Credentials.emailPassword(email, password);\n    const authenticatedUser = await app.logIn(credentials);\n    setUser(authenticatedUser);\n    return authenticatedUser;\n  }; // Function to sign up user into our App Service app using their email & password\n\n\n  const emailPasswordSignup = async (email, password) => {\n    try {\n      await app.emailPasswordAuth.registerUser(email, password); // Since we are automatically confirming our users, we are going to log in\n      // the user using the same credentials once the signup is complete.\n\n      return emailPasswordLogin(email, password);\n    } catch (error) {\n      throw error;\n    }\n  }; // Function to fetch the user (if the user is already logged in) from local storage\n\n\n  const fetchUser = async () => {\n    if (!app.currentUser) return false;\n\n    try {\n      await app.currentUser.refreshCustomData(); // Now, if we have a user, we are setting it to our user context\n      // so that we can use it in our app across different components.\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (error) {\n      throw error;\n    }\n  }; // Function to logout user from our App Services app\n\n\n  const logOutUser = async () => {\n    if (!app.currentUser) return false;\n\n    try {\n      await app.currentUser.logOut(); // Setting the user to null once loggedOut.\n\n      setUser(null);\n      return true;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      setUser,\n      fetchUser,\n      emailPasswordLogin,\n      emailPasswordSignup,\n      logOutUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n\n_c = UserProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["createContext","useState","App","Credentials","APP_ID","app","UserContext","UserProvider","children","user","setUser","emailPasswordLogin","email","password","credentials","emailPassword","authenticatedUser","logIn","emailPasswordSignup","emailPasswordAuth","registerUser","error","fetchUser","currentUser","refreshCustomData","logOutUser","logOut"],"sources":["C:/Users/Sharvani/Documents/GitHub/MSCS-Hack/Frontend/src/contexts/userContext.js"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport { App, Credentials } from \"realm-web\";\r\nimport { APP_ID } from \"../realm/constants\";\r\n \r\n// Creating a Realm App Instance\r\nconst app = new App(APP_ID);\r\n \r\n// Creating a user context to manage and access all the user related functions\r\n// across different components and pages.\r\nexport const UserContext = createContext();\r\n \r\nexport const UserProvider = ({ children }) => {\r\n const [user, setUser] = useState(null);\r\n \r\n // Function to log in user into our App Service app using their email & password\r\n const emailPasswordLogin = async (email, password) => {\r\n   const credentials = Credentials.emailPassword(email, password);\r\n   const authenticatedUser = await app.logIn(credentials);\r\n   setUser(authenticatedUser);\r\n   return authenticatedUser;\r\n };\r\n \r\n // Function to sign up user into our App Service app using their email & password\r\n const emailPasswordSignup = async (email, password) => {\r\n   try {\r\n     await app.emailPasswordAuth.registerUser(email, password);\r\n     // Since we are automatically confirming our users, we are going to log in\r\n     // the user using the same credentials once the signup is complete.\r\n     return emailPasswordLogin(email, password);\r\n   } catch (error) {\r\n     throw error;\r\n   }\r\n };\r\n \r\n // Function to fetch the user (if the user is already logged in) from local storage\r\n const fetchUser = async () => {\r\n   if (!app.currentUser) return false;\r\n   try {\r\n     await app.currentUser.refreshCustomData();\r\n     // Now, if we have a user, we are setting it to our user context\r\n     // so that we can use it in our app across different components.\r\n     setUser(app.currentUser);\r\n     return app.currentUser;\r\n   } catch (error) {\r\n     throw error;\r\n   }\r\n }\r\n \r\n // Function to logout user from our App Services app\r\n const logOutUser = async () => {\r\n   if (!app.currentUser) return false;\r\n   try {\r\n     await app.currentUser.logOut();\r\n     // Setting the user to null once loggedOut.\r\n     setUser(null);\r\n     return true;\r\n   } catch (error) {\r\n     throw error\r\n   }\r\n }\r\n \r\n return <UserContext.Provider value={{ user, setUser, fetchUser, emailPasswordLogin, emailPasswordSignup, logOutUser }}>\r\n   {children}\r\n </UserContext.Provider>;\r\n}"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,WAAjC;AACA,SAASC,MAAT,QAAuB,oBAAvB,C,CAEA;;;AACA,MAAMC,GAAG,GAAG,IAAIH,GAAJ,CAAQE,MAAR,CAAZ,C,CAEA;AACA;;AACA,OAAO,MAAME,WAAW,gBAAGN,aAAa,EAAjC;AAEP,OAAO,MAAMO,YAAY,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAC7C,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,IAAD,CAAhC,CAD6C,CAG7C;;EACA,MAAMU,kBAAkB,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;IACpD,MAAMC,WAAW,GAAGX,WAAW,CAACY,aAAZ,CAA0BH,KAA1B,EAAiCC,QAAjC,CAApB;IACA,MAAMG,iBAAiB,GAAG,MAAMX,GAAG,CAACY,KAAJ,CAAUH,WAAV,CAAhC;IACAJ,OAAO,CAACM,iBAAD,CAAP;IACA,OAAOA,iBAAP;EACD,CALD,CAJ6C,CAW7C;;;EACA,MAAME,mBAAmB,GAAG,OAAON,KAAP,EAAcC,QAAd,KAA2B;IACrD,IAAI;MACF,MAAMR,GAAG,CAACc,iBAAJ,CAAsBC,YAAtB,CAAmCR,KAAnC,EAA0CC,QAA1C,CAAN,CADE,CAEF;MACA;;MACA,OAAOF,kBAAkB,CAACC,KAAD,EAAQC,QAAR,CAAzB;IACD,CALD,CAKE,OAAOQ,KAAP,EAAc;MACd,MAAMA,KAAN;IACD;EACF,CATD,CAZ6C,CAuB7C;;;EACA,MAAMC,SAAS,GAAG,YAAY;IAC5B,IAAI,CAACjB,GAAG,CAACkB,WAAT,EAAsB,OAAO,KAAP;;IACtB,IAAI;MACF,MAAMlB,GAAG,CAACkB,WAAJ,CAAgBC,iBAAhB,EAAN,CADE,CAEF;MACA;;MACAd,OAAO,CAACL,GAAG,CAACkB,WAAL,CAAP;MACA,OAAOlB,GAAG,CAACkB,WAAX;IACD,CAND,CAME,OAAOF,KAAP,EAAc;MACd,MAAMA,KAAN;IACD;EACF,CAXD,CAxB6C,CAqC7C;;;EACA,MAAMI,UAAU,GAAG,YAAY;IAC7B,IAAI,CAACpB,GAAG,CAACkB,WAAT,EAAsB,OAAO,KAAP;;IACtB,IAAI;MACF,MAAMlB,GAAG,CAACkB,WAAJ,CAAgBG,MAAhB,EAAN,CADE,CAEF;;MACAhB,OAAO,CAAC,IAAD,CAAP;MACA,OAAO,IAAP;IACD,CALD,CAKE,OAAOW,KAAP,EAAc;MACd,MAAMA,KAAN;IACD;EACF,CAVD;;EAYA,oBAAO,QAAC,WAAD,CAAa,QAAb;IAAsB,KAAK,EAAE;MAAEZ,IAAF;MAAQC,OAAR;MAAiBY,SAAjB;MAA4BX,kBAA5B;MAAgDO,mBAAhD;MAAqEO;IAArE,CAA7B;IAAA,UACJjB;EADI;IAAA;IAAA;IAAA;EAAA,QAAP;AAGA,CArDM;;GAAMD,Y;;KAAAA,Y"},"metadata":{},"sourceType":"module"}