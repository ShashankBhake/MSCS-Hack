{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sharvani\\\\Documents\\\\GitHub\\\\MSCS-Hack\\\\Frontend\\\\src\\\\routes\\\\Login.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, TextField } from \"@mui/material\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Login = () => {\n  _s();\n\n  const navigate = useNavigate();\n  const location = useLocation(); // We are consuming our user-management context to\n  // get & set the user details here\n\n  const {\n    user,\n    fetchUser,\n    emailPasswordLogin\n  } = useContext(UserContext); // We are using React's \"useState\" hook to keep track\n  //  of the form values.\n\n  const [form, setForm] = useState({\n    email: \"\",\n    password: \"\"\n  }); // This function will be called whenever the user edits the form.\n\n  const onFormInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setForm({ ...form,\n      [name]: value\n    });\n  }; // This function will redirect the user to the\n  // appropriate page once the authentication is done.\n\n\n  const redirectNow = () => {\n    const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\n    navigate(redirectTo ? redirectTo : \"/\");\n  }; // Once a user logs in to our app, we don’t want to ask them for their\n  // credentials again every time the user refreshes or revisits our app, \n  // so we are checking if the user is already logged in and\n  // if so we are redirecting the user to the home page.\n  // Otherwise we will do nothing and let the user to login.\n\n\n  const loadUser = async () => {\n    if (!user) {\n      const fetchedUser = await fetchUser();\n\n      if (fetchedUser) {\n        // Redirecting them once fetched.\n        redirectNow();\n      }\n    }\n  }; // This useEffect will run only once when the component is mounted.\n  // Hence this is helping us in verifying whether the user is already logged in\n  // or not.\n\n\n  useEffect(() => {\n    loadUser(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // This function gets fired when the user clicks on the \"Login\" button.\n\n  const onSubmit = async event => {\n    try {\n      // Here we are passing user details to our emailPasswordLogin\n      // function that we imported from our realm/authentication.js\n      // to validate the user credentials and log in the user into our App.\n      const user = await emailPasswordLogin(form.email, form.password);\n\n      if (user) {\n        redirectNow();\n      }\n    } catch (error) {\n      if (error.statusCode === 401) {\n        alert(\"Invalid username/password. Try again!\");\n      } else {\n        alert(error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      maxWidth: \"300px\",\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Email\",\n      type: \"email\",\n      variant: \"outlined\",\n      name: \"email\",\n      value: form.email,\n      onChange: onFormInputChange,\n      style: {\n        marginBottom: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Password\",\n      type: \"password\",\n      variant: \"outlined\",\n      name: \"password\",\n      value: form.password,\n      onChange: onFormInputChange,\n      style: {\n        marginBottom: \"1rem\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: onSubmit,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/signup\",\n        children: \"Signup\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Login, \"9gls2aPBNlz+Ik/BGlcmZOmn9qY=\", false, function () {\n  return [useNavigate, useLocation];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["Button","TextField","useContext","useEffect","useState","Link","useLocation","useNavigate","Login","navigate","location","user","fetchUser","emailPasswordLogin","UserContext","form","setForm","email","password","onFormInputChange","event","name","value","target","redirectNow","redirectTo","search","replace","loadUser","fetchedUser","onSubmit","error","statusCode","alert","display","flexDirection","maxWidth","margin","marginBottom"],"sources":["C:/Users/Sharvani/Documents/GitHub/MSCS-Hack/Frontend/src/routes/Login.jsx"],"sourcesContent":["import { Button, TextField } from \"@mui/material\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useLocation, useNavigate } from \"react-router-dom\";\r\n\r\n \r\nconst Login = () => {\r\n const navigate = useNavigate();\r\n const location = useLocation();\r\n \r\n // We are consuming our user-management context to\r\n // get & set the user details here\r\n const { user, fetchUser, emailPasswordLogin } = useContext(UserContext);\r\n \r\n // We are using React's \"useState\" hook to keep track\r\n //  of the form values.\r\n const [form, setForm] = useState({\r\n   email: \"\",\r\n   password: \"\"\r\n });\r\n \r\n // This function will be called whenever the user edits the form.\r\n const onFormInputChange = (event) => {\r\n   const { name, value } = event.target;\r\n   setForm({ ...form, [name]: value });\r\n };\r\n \r\n // This function will redirect the user to the\r\n // appropriate page once the authentication is done.\r\n const redirectNow = () => {\r\n   const redirectTo = location.search.replace(\"?redirectTo=\", \"\");\r\n   navigate(redirectTo ? redirectTo : \"/\");\r\n }\r\n \r\n // Once a user logs in to our app, we don’t want to ask them for their\r\n // credentials again every time the user refreshes or revisits our app, \r\n // so we are checking if the user is already logged in and\r\n // if so we are redirecting the user to the home page.\r\n // Otherwise we will do nothing and let the user to login.\r\n const loadUser = async () => {\r\n   if (!user) {\r\n     const fetchedUser = await fetchUser();\r\n     if (fetchedUser) {\r\n       // Redirecting them once fetched.\r\n       redirectNow();\r\n     }\r\n   }\r\n }\r\n \r\n // This useEffect will run only once when the component is mounted.\r\n // Hence this is helping us in verifying whether the user is already logged in\r\n // or not.\r\n useEffect(() => {\r\n   loadUser(); // eslint-disable-next-line react-hooks/exhaustive-deps\r\n }, []);\r\n \r\n // This function gets fired when the user clicks on the \"Login\" button.\r\n const onSubmit = async (event) => {\r\n   try {\r\n     // Here we are passing user details to our emailPasswordLogin\r\n     // function that we imported from our realm/authentication.js\r\n     // to validate the user credentials and log in the user into our App.\r\n     const user = await emailPasswordLogin(form.email, form.password);\r\n     if (user) {\r\n       redirectNow();\r\n     }\r\n   } catch (error) {\r\n       if (error.statusCode === 401) {\r\n          alert(\"Invalid username/password. Try again!\");\r\n      } else {\r\n          alert(error);\r\n      }\r\n \r\n   }\r\n };\r\n \r\n return <form style={{ display: \"flex\", flexDirection: \"column\", maxWidth: \"300px\", margin: \"auto\" }}>\r\n   <h1>Login</h1>\r\n   <TextField\r\n     label=\"Email\"\r\n     type=\"email\"\r\n     variant=\"outlined\"\r\n     name=\"email\"\r\n     value={form.email}\r\n     onChange={onFormInputChange}\r\n     style={{ marginBottom: \"1rem\" }}\r\n   />\r\n   <TextField\r\n     label=\"Password\"\r\n     type=\"password\"\r\n     variant=\"outlined\"\r\n     name=\"password\"\r\n     value={form.password}\r\n     onChange={onFormInputChange}\r\n     style={{ marginBottom: \"1rem\" }}\r\n   />\r\n   <Button variant=\"contained\" color=\"primary\" onClick={onSubmit}>\r\n     Login\r\n   </Button>\r\n   <p>Don't have an account? <Link to=\"/signup\">Signup</Link></p>\r\n </form>\r\n}\r\n \r\nexport default Login;"],"mappings":"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"},"metadata":{},"sourceType":"module"}