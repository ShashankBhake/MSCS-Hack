{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sharvani\\\\Documents\\\\GitHub\\\\MSCS-Hack\\\\Frontend\\\\src\\\\routes\\\\PrivateRoute.page.js\",\n    _s = $RefreshSig$();\n\nimport { useContext } from \"react\";\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\nimport { UserContext } from \"../contexts/user.context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PrivateRoute = () => {\n  _s();\n\n  // Fetching the user from the user context.\n  const {\n    user\n  } = useContext(UserContext);\n  const location = useLocation();\n  const redirectLoginUrl = `/login?redirectTo=${encodeURI(location.pathname)}`; // If the user is not logged in we are redirecting them\n  // to the login page. Otherwise we are letting them to\n  // continue to the page as per the URL using <Outlet />.\n\n  return !user ? /*#__PURE__*/_jsxDEV(Navigate, {\n    to: redirectLoginUrl\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 17\n  }, this) : /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 54\n  }, this);\n};\n\n_s(PrivateRoute, \"M79qLDH95oiTF2KFpNG0BOxgtck=\", false, function () {\n  return [useLocation];\n});\n\n_c = PrivateRoute;\nexport default PrivateRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["useContext","Navigate","Outlet","useLocation","UserContext","PrivateRoute","user","location","redirectLoginUrl","encodeURI","pathname"],"sources":["C:/Users/Sharvani/Documents/GitHub/MSCS-Hack/Frontend/src/routes/PrivateRoute.page.js"],"sourcesContent":["import { useContext } from \"react\";\r\nimport { Navigate, Outlet, useLocation } from \"react-router-dom\";\r\nimport { UserContext } from \"../contexts/user.context\";\r\n \r\nconst PrivateRoute = () => {\r\n \r\n // Fetching the user from the user context.\r\n const { user } = useContext(UserContext);\r\n const location = useLocation();\r\n const redirectLoginUrl = `/login?redirectTo=${encodeURI(location.pathname)}`;\r\n \r\n // If the user is not logged in we are redirecting them\r\n // to the login page. Otherwise we are letting them to\r\n // continue to the page as per the URL using <Outlet />.\r\n return !user ? <Navigate to={redirectLoginUrl} /> : <Outlet /> ;\r\n}\r\n \r\nexport default PrivateRoute;"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,0BAA5B;;;AAEA,MAAMC,YAAY,GAAG,MAAM;EAAA;;EAE1B;EACA,MAAM;IAAEC;EAAF,IAAWN,UAAU,CAACI,WAAD,CAA3B;EACA,MAAMG,QAAQ,GAAGJ,WAAW,EAA5B;EACA,MAAMK,gBAAgB,GAAI,qBAAoBC,SAAS,CAACF,QAAQ,CAACG,QAAV,CAAoB,EAA3E,CAL0B,CAO1B;EACA;EACA;;EACA,OAAO,CAACJ,IAAD,gBAAQ,QAAC,QAAD;IAAU,EAAE,EAAEE;EAAd;IAAA;IAAA;IAAA;EAAA,QAAR,gBAA6C,QAAC,MAAD;IAAA;IAAA;IAAA;EAAA,QAApD;AACA,CAXD;;GAAMH,Y;UAIYF,W;;;KAJZE,Y;AAaN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}